<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:web="http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         id="zdcgl" version="3.1">
    <!-- 定义WEB应用的名字 -->
    <display-name>ZDCGL</display-name>

    <!-- 声明WEB应用的描述信息 -->
    <description>ZDC Management System</description>

    <!-- ch.qos.logback.ext.spring.web.LogbackConfigListener 使用此监听器 需要为不同的 project 设置不同的 webAppRootKey, 否则同一tomcat 部署多项目时会报 webapp.root值被改变的错误 -->
    <context-param>
        <param-name>webAppRootKey</param-name>
        <param-value>pms.root</param-value>
    </context-param>

    <!-- spring 加载文件 -->
    <!-- Context Configuration locations for Spring XML files -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            /WEB-INF/config/applicationContext.xml
        </param-value>
    </context-param>

    <!-- spring + logback 配置文件监听器 -->
    <context-param>
        <param-name>logbackConfigLocation</param-name>
        <param-value>/WEB-INF/config/development/logback.xml</param-value>
    </context-param>

    <!-- spring security 常规 filter 默认name: springSecurityFilterChain 更名:filterChainProxy -->
    <!--	<filter>
            <filter-name>filterChainProxy</filter-name>
            <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
            <init-param>
                <param-name>targetBean</param-name>
                <param-value>filterChainProxy</param-value>
            </init-param>
            <init-param>
                <param-name>targetFilterLifecycle</param-name>
                <param-value>true</param-value>
            </init-param>
        </filter>

        <filter-mapping>
            <filter-name>filterChainProxy</filter-name>
            <url-pattern>/*</url-pattern>
        </filter-mapping>
    -->
    <!-- security管理会话监听
    <listener id="Listener_Spring_Security_Session_Event_Publisher">
        <listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
    </listener>
 -->
    <!-- spring加载器 -->
    <!--<listener>-->
        <!--<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>-->
    <!--</listener>-->

    <!-- 解决sprnig中缓存泄露问题 -->
    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>

    <listener>
        <listener-class>ch.qos.logback.ext.spring.web.LogbackConfigListener</listener-class>
    </listener>

    <!-- Spring MVC 配置 默认拦截所有请求 -->
    <servlet>
        <servlet-name>SpringMVC</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/config/webApplicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>SpringMVC</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- 解决hibernate jpa 因为懒加载导致jpa session已经关闭的错误 -->
    <filter>
        <filter-name>Spring OpenEntityManagerInViewFilter</filter-name>
        <filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>Spring OpenEntityManagerInViewFilter</filter-name>
        <url-pattern>/</url-pattern>
    </filter-mapping>

    <!-- =========error handle=========  -->
    <error-page>
        <error-code>404</error-code>
        <location>/error/PageNotFound</location>
    </error-page>

    <!-- 默认文件名 -->
    <welcome-file-list>
        <welcome-file>login.html</welcome-file>
    </welcome-file-list>

    <!-- session过期时间 10分钟 -->
    <session-config>
        <session-timeout>10</session-timeout>
    </session-config>

</web-app>
